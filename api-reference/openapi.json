{
  "openapi": "3.0.4",
  "info": {
    "title": "RABOT Partner API",
    "description": "",
    "version": "v1"
  },
  "paths": {
    "/partner/v1/customers/link": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create customer link",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.ApiCustomerLinkRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.ApiCustomerLinkRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.ApiCustomerLinkRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ApiCustomerLinkResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ApiCustomerLinkResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ApiCustomerLinkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/customers/{customerNumber}/link": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete customer link",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/partner/v1/customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customers linked to the partner.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.ListItems.CustomerListItemDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/customers/{customerNumber}/contracts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get contracts for given customer (number)",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Orders.GetContractResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/customers/{customerNumber}/contracts/{contractNumber}/metrics": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get contract metrics",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractNumber",
            "in": "path",
            "description": "Contract number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Period.From",
            "in": "query",
            "description": "Start of period",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Period.To",
            "in": "query",
            "description": "End of period",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Interval",
            "in": "query",
            "description": "Information about interval to get contract metrics",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsInterval"
                }
              ]
            }
          },
          {
            "name": "MetricType",
            "in": "query",
            "description": "Information about metric type to get contract metrics",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsType"
                }
              ]
            }
          },
          {
            "name": "ValueType",
            "in": "query",
            "description": "Information about metric value type to get contract metrics",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsValueType"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.GetContractMetricsDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/customers/{customerNumber}/contracts/{contractNumber}/consumption/plans": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Insert contract consumption plan",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractNumber",
            "in": "path",
            "description": "Contract number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Consumption plan and its data",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Contracts.InsertContractConsumptionPlanRequestDto"
                  }
                ],
                "description": "Information about contract consumption plan to be inserted"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Contracts.InsertContractConsumptionPlanRequestDto"
                  }
                ],
                "description": "Information about contract consumption plan to be inserted"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Contracts.InsertContractConsumptionPlanRequestDto"
                  }
                ],
                "description": "Information about contract consumption plan to be inserted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Contract.InsertContractConsumptionPlanResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/customers/{customerNumber}/contracts/{contractNumber}/documents": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get contract documents",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractNumber",
            "in": "path",
            "description": "Contract number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "Document type. Default is ALL",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Rabot.Prosumer.Grpc.Contracts.Services.Generated.DocumentType"
                }
              ],
              "default": "All"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Handlers.Customers.GetCustomerDocumentsResponse, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/customers/{customerNumber}/contracts/{contractNumber}/documents/{fileId}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get contract document stream",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractNumber",
            "in": "path",
            "description": "Contract number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/partner/v1/day-ahead-prices/limited": {
      "get": {
        "tags": [
          "DayAheadPrices"
        ],
        "summary": "Returns limited day-ahead prices, with a maximum of 48-hour interval.\nAll dates are considered in the German time zone.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Beginning date of the interval, assumed current date, if not provided",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date of the interval, assumed current date + 48 hours, if not provided",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.DayAheadPricesDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/orders": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create a new order",
        "requestBody": {
          "description": "Request data object",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Orders.CreateOrderRequestDto"
                  }
                ],
                "description": "Information about a new order to be created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Orders.CreateOrderResponseDto"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "List all orders for the authenticated partner.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the page.",
            "schema": {/partner/v1/orders
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrdersByPartnerIdResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/orders/{contractNumber}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get the order by its contract number.",
        "parameters": [
          {
            "name": "contractNumber",
            "in": "path",
            "description": "The unique identifier of the contract",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrderByContractNumberResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/tariffs": {
      "get": {
        "tags": [
          "Tariff"
        ],
        "summary": "Return list of available tariffs",
        "parameters": [
          {
            "name": "effectiveDate",
            "in": "query",
            "description": "Effective date or NULL, if today",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.TariffListItemDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.TariffListItemDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.TariffListItemDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    },
    "/partner/v1/tariffs/{tariffKey}/calculation": {
      "post": {
        "tags": [
          "Tariff"
        ],
        "summary": "Create estimated cost calculation",
        "parameters": [
          {
            "name": "tariffKey",
            "in": "path",
            "description": "Key of the tariff to calculate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request data object",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Tariffs.TariffCalculationRequestDto"
                  }
                ],
                "description": "Data object for a tariff calculation request."
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Tariffs.TariffCalculationRequestDto"
                  }
                ],
                "description": "Data object for a tariff calculation request."
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Tariffs.TariffCalculationRequestDto"
                  }
                ],
                "description": "Data object for a tariff calculation request."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto": {
        "type": "object",
        "properties": {
          "severity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorSeverities"
              }
            ],
            "description": "Severity of the error.",
            "example": "Error"
          },
          "code": {
            "type": "string",
            "description": "Internal error code for client processing.",
            "example": "validation-failed"
          },
          "message": {
            "type": "string",
            "description": "Error message.",
            "example": "First name is required for non-business customers."
          },
          "details": {
            "type": "string",
            "description": "Additional details about the error.",
            "nullable": true,
            "example": null
          }
        },
        "additionalProperties": false,
        "description": "API Error response DTO."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiErrorSeverities": {
        "enum": [
          "Error",
          "Warning",
          "Notice"
        ],
        "type": "string",
        "description": "Enumerates the severity of an API error.<p>Members:</p><ul><li><i>Error</i> - Error; a critical error information.</li> <li><i>Warning</i> - Warning; an incorrect behavior information.</li> <li><i>Notice</i> - Notice; a non-standard behavior information.</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.ListItems.CustomerListItemDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ListItems.CustomerListItemDto"
            },
            "description": "Returned data instance."
          },
          "count": {
            "type": "integer",
            "description": "Number of items returned in the list.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with a list of items."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Handlers.Customers.GetCustomerDocumentsResponse, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Handlers.Customers.GetCustomerDocumentsResponse"
            },
            "description": "Returned data instance."
          },
          "count": {
            "type": "integer",
            "description": "Number of items returned in the list.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with a list of items."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Contract.InsertContractConsumptionPlanResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Contract.InsertContractConsumptionPlanResponseDto"
            },
            "description": "Returned data instance."
          },
          "count": {
            "type": "integer",
            "description": "Number of items returned in the list.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with a list of items."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiListResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Orders.GetContractResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Orders.GetContractResponseDto"
            },
            "description": "Returned data instance."
          },
          "count": {
            "type": "integer",
            "description": "Number of items returned in the list.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with a list of items."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.DayAheadPricesDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.DayAheadPricesDto"
              }
            ],
            "description": "Returned data instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with data."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.DataObjects.TariffListItemDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.TariffListItemDto"
              }
            ],
            "description": "Returned data instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with data."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.GetContractMetricsDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.GetContractMetricsDto"
              }
            ],
            "description": "Returned data instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with data."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrderByContractNumberResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrderByContractNumberResponseDto"
              }
            ],
            "description": "Returned data instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with data."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrdersByPartnerIdResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrdersByPartnerIdResponseDto"
              }
            ],
            "description": "Returned data instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with data."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.ApiResponseDto`1[[Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto, Rabot.Partner.WebApi, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "description": "Success status of the operation based on status code (2xx range).",
            "readOnly": true,
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Optional message to provide additional information about the operation result.",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.ApiErrorDto"
            },
            "description": "Optional error details in case of an error(s).",
            "nullable": true
          },
          "refUri": {
            "type": "string",
            "description": "Optional reference URI to point to the resulting resource.",
            "format": "uri",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto"
              }
            ],
            "description": "Returned data instance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "API response DTO with data."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "Value of the unit.",
            "format": "double"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.UnitDto"
              }
            ],
            "description": "Unit of the value."
          },
          "unitText": {
            "type": "string",
            "description": "Textual representation of the unit in German."
          }
        },
        "additionalProperties": false,
        "description": "Specifies a measurable value with a unit of type decimal."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.IntegerUnitValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Value of the unit.",
            "format": "int32"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.UnitDto"
              }
            ],
            "description": "Unit of the value."
          },
          "unitText": {
            "type": "string",
            "description": "Textual representation of the unit in German."
          }
        },
        "additionalProperties": false,
        "description": "Specifies a measurable value with a unit of type integer."
      },
      "Rabot.Partner.WebApi.Api.DataObjects.UnitDto": {
        "type": "object",
        "properties": {
          "main": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.Units"
              }
            ],
            "description": "Main unit."
          },
          "per": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.Units"
              }
            ],
            "description": "Per unit in form of main/per or NULL if none.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.DataObjects.Units": {
        "enum": [
          "None",
          "Kwh",
          "Kw",
          "Euro",
          "Cent",
          "Percent",
          "Year",
          "Month",
          "Day",
          "Hour",
          "Minute"
        ],
        "type": "string",
        "description": "<p>Members:</p><ul><li><i>None</i> - No unit.</li> <li><i>Kwh</i> - Kilowatt hours.</li> <li><i>Kw</i> - Kilowatts.</li> <li><i>Euro</i> - Euros.</li> <li><i>Cent</i> - Euro cents.</li> <li><i>Percent</i> - Percent.</li> <li><i>Year</i> - Year.</li> <li><i>Month</i> - Month.</li> <li><i>Day</i> - Day.</li> <li><i>Hour</i> - Hour.</li> <li><i>Minute</i> - Minute.</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.AddressDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Academic title or NULL if none",
            "nullable": true,
            "example": "Dr."
          },
          "firstName": {
            "type": "string",
            "description": "First name or NULL if business address",
            "nullable": true,
            "example": "Thomas"
          },
          "lastName": {
            "type": "string",
            "description": "Last name or NULL if business address",
            "nullable": true,
            "example": "Mustermann"
          },
          "businessName": {
            "type": "string",
            "description": "Business name in case of business address or NULL if person",
            "nullable": true,
            "example": null
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.Genders"
              }
            ],
            "description": "Gender of the address holder",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "description": "Address extension",
            "nullable": true,
            "example": null
          },
          "streetName": {
            "type": "string",
            "description": "Street name",
            "example": "Grüner Weg"
          },
          "houseNumber": {
            "type": "string",
            "description": "House number or NULL if none",
            "example": "42"
          },
          "city": {
            "type": "string",
            "description": "Name of the city",
            "example": "Berlin"
          },
          "postCode": {
            "type": "string",
            "description": "Postcode in valid format",
            "example": "14109"
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166 A2 code of the country",
            "example": "DE"
          }
        },
        "additionalProperties": false,
        "description": "Address data transfer object."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.BankDetailsDto": {
        "type": "object",
        "properties": {
          "accountHolder": {
            "type": "string",
            "description": "Name of the account holder. When used to create an order,\nif the value is not provided, the name of the customer from\nbilling address (or delivery address, when billing address is not provided)\nwill be used.",
            "nullable": true,
            "example": "Thomas Heinrich Mustermann"
          },
          "iban": {
            "type": "string",
            "description": "IBAN of the account.",
            "example": "DE89370400440532013000"
          },
          "bic": {
            "type": "string",
            "description": "BIC of the account.",
            "nullable": true,
            "example": "DEUTDEFF"
          },
          "bankName": {
            "type": "string",
            "description": "Name of the bank.",
            "nullable": true,
            "example": "Deutsche Bank"
          },
          "hasAcceptedDirectDebit": {
            "type": "boolean",
            "description": "Flags, if the direct debit has been accepted.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Bank details data transfer object."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ContractAgreementsDto": {
        "type": "object",
        "properties": {
          "termsAndConditions": {
            "type": "boolean",
            "description": "Flags, whether the terms and conditions have been accepted.",
            "example": true
          },
          "privacyPolicy": {
            "type": "boolean",
            "description": "Flags, whether the privacy policy has been accepted.",
            "example": true
          },
          "revocationPolicy": {
            "type": "boolean",
            "description": "Flags, whether the revocation policy has been accepted.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Flags of contract agreements"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ContractDto": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External identifier of contract created from an external system.",
            "nullable": true,
            "example": "urn:acme:contract:ffa98ecb-f28c-442d-b52e-7ffdc97ba676"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractTypes"
              }
            ],
            "description": "Type of the contract.",
            "example": "Personal"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractStateDto"
              }
            ],
            "description": "State of the contract.",
            "nullable": true,
            "readOnly": true
          },
          "number": {
            "type": "string",
            "description": "Read-only contract number, provided by the API.",
            "nullable": true,
            "readOnly": true,
            "example": "123456789"
          },
          "deliveryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.AddressDto"
              }
            ],
            "description": "Delivery address of the contract."
          },
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.AddressDto"
              }
            ],
            "description": "Billing address of the contract.",
            "nullable": true,
            "example": null
          },
          "bankDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.BankDetailsDto"
              }
            ],
            "description": "Bank details of the contract or NULL, when invoice pays due.",
            "nullable": true
          },
          "contractReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractReasons"
              }
            ],
            "description": "Reason, why the contract was created.",
            "example": "NewDeliveryLocation"
          },
          "deliveryDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.DeliveryDetailsDto"
              }
            ],
            "description": "Information about the point of delivery."
          },
          "deliveryState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.DeliveryStateDto"
              }
            ],
            "description": "Delivery state information of the contract.",
            "nullable": true,
            "readOnly": true
          },
          "agreements": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractAgreementsDto"
              }
            ],
            "description": "Contract agreements."
          },
          "validFromDate": {
            "type": "string",
            "description": "Contract start date.",
            "format": "date",
            "nullable": true,
            "readOnly": true,
            "example": "2024-01-01"
          },
          "validToDate": {
            "type": "string",
            "description": "Contract end date or NULL if no end date.",
            "format": "date",
            "nullable": true,
            "readOnly": true,
            "example": null
          },
          "transactionDateTime": {
            "type": "string",
            "description": "Date and time of the transaction that created this contract.\nIf not provided, current date and time is used.",
            "format": "date-time",
            "nullable": true,
            "example": "2024-04-01 00:00:00"
          }
        },
        "additionalProperties": false,
        "description": "Contract data transfer object."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsInterval": {
        "enum": [
          "QuarterHourly",
          "Hourly",
          "Daily",
          "Weekly",
          "Monthly",
          "Yearly"
        ],
        "type": "string",
        "description": "Interval of contract metrics<p>Members:</p><ul><li><i>QuarterHourly</i> - QuarterHourly</li> <li><i>Hourly</i> - Hourly</li> <li><i>Daily</i> - Daily</li> <li><i>Weekly</i> - Weekly</li> <li><i>Monthly</i> - Monthly</li> <li><i>Yearly</i> - Yearly</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsType": {
        "enum": [
          "Consumption",
          "Saving",
          "TotalCost",
          "WorkingPrice",
          "Co2Saving"
        ],
        "type": "string",
        "description": "Type of contract metrics<p>Members:</p><ul><li><i>Consumption</i> - Total energy consumption (kWh) in the selected period</li> <li><i>Saving</i> - Monetary savings in the selected period (EUR), compared to the local default supplier (Grundversorger)</li> <li><i>TotalCost</i> - Total cost in the selected period (EUR). This includes both working price (per kWh) and base price (per month) cost components. For periods shorter than one month, the base price is prorated accordingly. Note that this can differ from invoiced amounts depending on the tariff conditions.</li> <li><i>WorkingPrice</i> - Working price (EUR/kWh) in the selected period. Note that this can differ from invoiced amounts depending on the tariff conditions.</li> <li><i>Co2Saving</i> - Savings in CO2 emissions in kg, based on the default energy grid mix</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsValueType": {
        "enum": [
          "Actual",
          "Forecast",
          "Dynamic",
          "Combined"
        ],
        "type": "string",
        "description": "Type of returned value<p>Members:</p><ul><li><i>Actual</i> - Always return actual data only</li> <li><i>Forecast</i> - Always return forecast data only</li> <li><i>Dynamic</i> - Dynamically returns actual OR forecast data (never mixed) based on backend decision.</li> <li><i>Combined</i> - Combine forecast values and actual values. Show actual values instead of forecast values for a specific moment if available.</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ContractStateDto": {
        "type": "object",
        "properties": {
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractStates"
              }
            ],
            "description": "Status of contract processing.",
            "readOnly": true,
            "example": "Rejected"
          },
          "comment": {
            "type": "string",
            "description": "Additional comment about the contract state.",
            "nullable": true,
            "readOnly": true,
            "example": "Contract was rejected by Schufa"
          }
        },
        "additionalProperties": false,
        "description": "Detailed information about contract state"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.DayAheadPriceEntryDto": {
        "required": [
          "at",
          "price"
        ],
        "type": "object",
        "properties": {
          "at": {
            "type": "string",
            "description": "Moment in time of the price.",
            "format": "date-time"
          },
          "price": {
            "type": "number",
            "description": "Price in cent per kWh.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Single entry of day-ahead price result."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.DayAheadPricesDto": {
        "required": [
          "from",
          "prices",
          "pricesKind",
          "pricesUnit",
          "to"
        ],
        "type": "object",
        "properties": {
          "pricesUnit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.UnitDto"
              }
            ],
            "description": "Unit of the provided prices."
          },
          "pricesKind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.AmountKinds"
              }
            ],
            "description": "Specifies the kind of price (gross or net)."
          },
          "from": {
            "type": "string",
            "description": "Date and time from which the prices are provided.",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "Date and time to which the prices are provided.",
            "format": "date-time"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.DayAheadPriceEntryDto"
            },
            "description": "Prices for the specified interval."
          }
        },
        "additionalProperties": false,
        "description": "Response object for day-ahead prices."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.DeliveryCapabilitiesDto": {
        "type": "object",
        "properties": {
          "hasElectricVehicle": {
            "type": "boolean",
            "description": "Flag, indicating if the contract holder has an electric vehicle.",
            "example": false
          },
          "hasSmartMeter": {
            "type": "boolean",
            "description": "Flag, indicating if the contract holder has a smart meter.",
            "example": true
          },
          "hasHeatPump": {
            "type": "boolean",
            "description": "Flag, indicating if the contract holder has a heat pump.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Capabilities of a contract holder."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.DeliveryDetailsDto": {
        "type": "object",
        "properties": {
          "meterNumber": {
            "type": "string",
            "description": "Identification number of the metering device bound to the contract.",
            "nullable": true,
            "example": "123456789"
          },
          "maLoIdentifier": {
            "type": "string",
            "description": "Market location identifier; will be used when provided,\notherwise it will be retrieved from MaKo service.",
            "nullable": true,
            "example": "99987999749"
          },
          "meLoIdentifier": {
            "type": "string",
            "description": "Metering location identifier; will be used when provided,\notherwise it will be retrieved from MaKo service.",
            "nullable": true,
            "example": "DE99911149565001246597500M01ID018"
          },
          "desiredTransitionDate": {
            "type": "string",
            "description": "Date of the desired transition to a new supplier.",
            "format": "date",
            "nullable": true,
            "example": "2024-05-01"
          },
          "moveInDate": {
            "type": "string",
            "description": "Date when the customer moves in to a location of delivery point, if applicable.",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "previousSelfCancelledDate": {
            "type": "string",
            "description": "Date of previous contract self-cancellation, if applicable.",
            "format": "date",
            "nullable": true,
            "example": "2024-04-22"
          },
          "previousSupplierCode": {
            "type": "string",
            "description": "BDEW code of previous supplier, or NULL if none.",
            "nullable": true,
            "example": "9979250000006"
          },
          "previousAnnualConsumptionKwh": {
            "type": "integer",
            "description": "Previous annual consumption in kWh.",
            "format": "int32",
            "example": 2600
          },
          "capabilities": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.DeliveryCapabilitiesDto"
              }
            ],
            "description": "Capabilities of the delivery point."
          }
        },
        "additionalProperties": false,
        "description": "Information about the place of delivery and delivery conditions."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.DeliveryStateDto": {
        "required": [
          "dsoBdewCode",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Delivery start date.",
            "format": "date",
            "example": "2024-02-01"
          },
          "endDate": {
            "type": "string",
            "description": "Delivery end date or NULL if not specified.",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.DeliveryStates"
              }
            ],
            "description": "Current delivery state",
            "example": "InChangeProcess"
          },
          "denialReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.DenialReasons"
              }
            ],
            "description": "Reason for denial if state is \"Denied\" or NULL otherwise.",
            "nullable": true,
            "example": null
          },
          "dsoBdewCode": {
            "type": "string",
            "description": "BDEW code of the DSO responsible for the delivery.",
            "example": "9907262000003"
          },
          "cancellationReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.CancellationReasons"
              }
            ],
            "description": "Cancellation reason if state is \"Canceled\" or NULL otherwise.",
            "nullable": true,
            "example": null
          }
        },
        "additionalProperties": false,
        "description": "Delivery state data transfer object."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.DocumentDto": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "File Id",
            "format": "uuid"
          },
          "documentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Prosumer.Grpc.Contracts.Services.Generated.DocumentType"
              }
            ],
            "description": "Document type",
            "example": "SETTLEMENT"
          },
          "name": {
            "type": "string",
            "description": "File name",
            "example": "test_filename"
          },
          "extension": {
            "type": "string",
            "description": "File extension",
            "example": ".pdf"
          },
          "sizeInBytes": {
            "type": "integer",
            "description": "File size in bytes",
            "format": "int32"
          },
          "isAvailableForCustomer": {
            "type": "boolean",
            "description": "Is file available for customer flag",
            "example": true
          },
          "lastDownloadedAt": {
            "type": "string",
            "description": "Last downloaded at (date)",
            "format": "date",
            "nullable": true,
            "example": "2024-02-01"
          },
          "info": {
            "description": "File information",
            "nullable": true
          },
          "billogramUrl": {
            "type": "string",
            "description": "Billogram URL",
            "nullable": true,
            "example": "https://billogram.com/x/123TEST/TEST123"
          }
        },
        "additionalProperties": false,
        "description": "Customer information data transfer object."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.AmountKinds": {
        "enum": [
          "Gross",
          "Net"
        ],
        "type": "string",
        "description": "Specifies the kind of monetary amount<p>Members:</p><ul><li><i>Gross</i> - Gross amount (including VAT)</li> <li><i>Net</i> - Net amount (excluding VAT)</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.CancellationReasons": {
        "enum": [
          "Dunning",
          "SupplierChange",
          "Relocation",
          "Other"
        ],
        "type": "string",
        "description": "Specifies the reason for a cancellation of contract.<p>Members:</p><ul><li><i>Dunning</i> - Dunning-related cancellation.</li> <li><i>SupplierChange</i> - Change of energy supplier.</li> <li><i>Relocation</i> - Relocation of the customer.</li> <li><i>Other</i> - Other reasons.</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractReasons": {
        "enum": [
          "NewDeliveryLocation",
          "ChangeOfSupplier"
        ],
        "type": "string",
        "description": "Enumeration of transaction reasons<p>Members:</p><ul><li><i>NewDeliveryLocation</i> - New delivery location</li> <li><i>ChangeOfSupplier</i> - Change of supplier</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractStates": {
        "enum": [
          "Open",
          "Delivery",
          "Unspecified",
          "PendingDelivery",
          "Cancelled",
          "Rejected",
          "Revoked",
          "Processing"
        ],
        "type": "string",
        "description": "Enumeration of contract states<p>Members:</p><ul><li><i>Open</i> - Contract is waiting to be processed</li> <li><i>Delivery</i> - Contract is in delivery</li> <li><i>Unspecified</i> - Incorrect getec contract state</li> <li><i>PendingDelivery</i> - Contract was successfully processed and is pending delivery</li> <li><i>Cancelled</i> - Contract was cancelled (see delivery state for more details)</li> <li><i>Rejected</i> - Contract was rejected</li> <li><i>Revoked</i> - Contract was revoked</li> <li><i>Processing</i> - Contract is being processed</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractTypes": {
        "enum": [
          "Private",
          "Business"
        ],
        "type": "string",
        "description": "Type of contract (private or business).<p>Members:</p><ul><li><i>Private</i> - Contract of a private person</li> <li><i>Business</i> - Contract of a business</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.DeliveryStates": {
        "enum": [
          "Delivery",
          "DeliveryPending",
          "CancelledDelivery",
          "CancelledPendingDelivery",
          "Cancelled",
          "Denied",
          "Revoked",
          "InChangeProcess",
          "Other"
        ],
        "type": "string",
        "description": "Specifies the state of a delivery of a contract.<p>Members:</p><ul><li><i>Delivery</i> - Contract in delivery.</li> <li><i>DeliveryPending</i> - Contract is ready and pending delivery.</li> <li><i>CancelledDelivery</i> - Delivery of the contract was cancelled.</li> <li><i>CancelledPendingDelivery</i> - Cancellation of the delivery is pending.</li> <li><i>Cancelled</i> - Contract was cancelled.</li> <li><i>Denied</i> - Contract was denied.</li> <li><i>Revoked</i> - Contract was revoked.</li> <li><i>InChangeProcess</i> - Contract is in change process.</li> <li><i>Other</i> - Other delivery state.</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.DenialReasons": {
        "enum": [
          "Dunning",
          "InsufficientSolvency",
          "ContractCommitment",
          "Duplicate",
          "UnsuccessfulSupplierChange",
          "Other"
        ],
        "type": "string",
        "description": "Specifies the reason for a denial of contract.<p>Members:</p><ul><li><i>Dunning</i> - Denial due to dunning process.</li> <li><i>InsufficientSolvency</i> - SCHUFA score is too low.</li> <li><i>ContractCommitment</i> - Denial due to contract commitment.</li> <li><i>Duplicate</i> - Denial due to a duplicate contract.</li> <li><i>UnsuccessfulSupplierChange</i> - Denial due to an unsuccessful supplier change.</li> <li><i>Other</i> - Other reasons.</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.Genders": {
        "enum": [
          "Male",
          "Female",
          "Other"
        ],
        "type": "string",
        "description": "Enumeration of genders<p>Members:</p><ul><li><i>Male</i> - Male gender</li> <li><i>Female</i> - Female gender</li> <li><i>Other</i> - Other or unspecified gender</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.ListItems.CustomerListItemDto": {
        "required": [
          "customerNumber",
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "Customer number.",
            "example": "123456789"
          },
          "externalIdentifier": {
            "type": "string",
            "description": "External identifier assigned by the calling partner.",
            "nullable": true,
            "example": "123456789"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer",
            "nullable": true,
            "example": "Max"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer.",
            "nullable": true,
            "example": "Mustermann"
          },
          "businessName": {
            "type": "string",
            "description": "Company name of the customer.",
            "nullable": true,
            "example": "Company GmbH"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email Address of the customer.",
            "example": "max_mustermann@rabot-charge.de"
          }
        },
        "additionalProperties": false,
        "description": "List item for customer information used in listing endpoints."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.OrderDto": {
        "required": [
          "contractNumber",
          "customerNumber",
          "emailAddress",
          "tariffName"
        ],
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "Read-only customer number provided by the API",
            "example": "123456789"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer or NULL if business customer.",
            "nullable": true,
            "example": "Max"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer or NULL if business customer.",
            "nullable": true,
            "example": "Mustermann"
          },
          "businessName": {
            "type": "string",
            "description": "Business name or NULL if private customer",
            "nullable": true,
            "example": null
          },
          "emailAddress": {
            "type": "string",
            "description": "Email Address of the customer",
            "example": "max_mustermann@rabot-charge.de"
          },
          "tariffName": {
            "type": "string",
            "description": "Name of the selected tariff for this order",
            "example": "rabot.smart"
          },
          "contractNumber": {
            "type": "string",
            "description": "Order / Contract number",
            "example": "987654321"
          },
          "meterNumber": {
            "type": "string",
            "description": "Meter number as provided as part of the order, can be null",
            "nullable": true,
            "example": "12LN6786454"
          },
          "meLoIdentifier": {
            "type": "string",
            "description": "Metering Location identifier or NULL if not provided",
            "nullable": true,
            "example": "DE12345678901234567890"
          },
          "maLoIdentifier": {
            "type": "string",
            "description": "Market Location identifier or NULL if not provided",
            "nullable": true,
            "example": "99987999749"
          },
          "deliveryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.AddressDto"
              }
            ],
            "description": "Delivery address of the customer",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractStates"
              }
            ],
            "description": "State of the order processing",
            "example": "Delivery"
          },
          "denialReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.DenialReasons"
              }
            ],
            "description": "Reason for the order denial, if applicable",
            "nullable": true,
            "example": "Other"
          },
          "actualDateOfDelivery": {
            "type": "string",
            "description": "Start of delivery date, as confirmed by DSO and previous supplier, null if not known (yet)",
            "format": "date",
            "nullable": true,
            "example": "2025-04-01"
          },
          "endDateOfDelivery": {
            "type": "string",
            "description": "End of delivery date, if contract is canceled",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "contractSignatureDate": {
            "type": "string",
            "description": "Contract signature date, as provided in order creation request",
            "format": "date-time",
            "nullable": true,
            "example": "2025-02-23 14:24:15",
            "deprecated": true
          },
          "contractSignedAt": {
            "type": "string",
            "description": "Contract signature date, as provided in order creation request",
            "format": "date-time",
            "nullable": true,
            "example": "2025-02-23 14:24:15"
          },
          "estimatedYearlyConsumption": {
            "type": "integer",
            "description": "Estimated yearly consumption, in kWh",
            "format": "int32",
            "nullable": true,
            "example": 3500
          }
        },
        "additionalProperties": false,
        "description": "Order information data transfer object."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.TariffListItemDto": {
        "required": [
          "providerName",
          "tariffName"
        ],
        "type": "object",
        "properties": {
          "tariffName": {
            "type": "string",
            "description": "Name of the tariff."
          },
          "tariffKey": {
            "type": "string",
            "description": "Tariff key for affiliate tariff.",
            "nullable": true
          },
          "providerName": {
            "type": "string",
            "description": "Name of the provider, that provides this tariff."
          }
        },
        "additionalProperties": false,
        "description": "Single tariff information list item."
      },
      "Rabot.Partner.WebApi.Api.V1.DataObjects.UserAccountDto": {
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "Customer number",
            "nullable": true,
            "readOnly": true
          },
          "emailAddress": {
            "type": "string",
            "description": "E-mail address of the account. This is used for email communication (e.g. when sending the order confirmation), and also serves as the login name for the mobile app.",
            "example": "j.doe@example.tld"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the account holder",
            "nullable": true,
            "example": "+491234567890"
          },
          "password": {
            "type": "string",
            "description": "Password in plain text. If no password is provided, a random password is generated, and the user will have to use the forget password flow to define a new password.",
            "nullable": true,
            "writeOnly": true,
            "example": "SomeExamplePassword987."
          },
          "firstName": {
            "type": "string",
            "description": "First name of the account holder",
            "nullable": true,
            "example": "Max"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the account holder",
            "nullable": true,
            "example": "Mustermann"
          },
          "businessName": {
            "type": "string",
            "description": "Company name if this is a business account",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.Genders"
              }
            ],
            "description": "Gender of the account holder",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the account holder",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about user account."
      },
      "Rabot.Partner.WebApi.Api.V1.Handlers.Customers.GetCustomerDocumentsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.DocumentDto"
            }
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Requests.ApiCustomerLinkRequest": {
        "type": "object",
        "properties": {
          "successUrl": {
            "type": "string",
            "description": "URL to redirect to in case of success. If NULL, then no redirect will be performed.",
            "format": "uri",
            "default": null,
            "nullable": true
          },
          "failureUrl": {
            "type": "string",
            "description": "URL to redirect to in case of error. If NULL, then no redirect will be performed.",
            "format": "uri",
            "default": null,
            "nullable": true
          },
          "customerNumberQueryParameterName": {
            "type": "string",
            "description": "Name of the query parameter in success redirect, that contains the customer number.",
            "default": "customerNumber"
          },
          "externalCustomerId": {
            "type": "string",
            "description": "If set, this value will be assigned to the customer as external\ncustomer identifier after successful linking. Subsequently,\nit can be used to retrieve the customer via Partner API.",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Requests.Contracts.InsertContractConsumptionDataDto": {
        "type": "object",
        "properties": {
          "tz": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time"
          },
          "kwh": {
            "type": "number",
            "description": "Amount [kWh]",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Consumption data for contract consumption plan."
      },
      "Rabot.Partner.WebApi.Api.V1.Requests.Contracts.InsertContractConsumptionPlanRequestDto": {
        "required": [
          "amounts"
        ],
        "type": "object",
        "properties": {
          "amounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Requests.Contracts.InsertContractConsumptionDataDto"
            },
            "description": "Consumption plan amounts"
          },
          "intervalBeginAt": {
            "type": "string",
            "description": "Begin of inserted interval",
            "format": "date-time",
            "example": "2024-09-01 00:00:00"
          },
          "intervalEndAt": {
            "type": "string",
            "description": "End of inserted interval",
            "format": "date-time",
            "example": "2024-09-30 00:00:00"
          }
        },
        "additionalProperties": false,
        "description": "Information about contract consumption plan to be inserted"
      },
      "Rabot.Partner.WebApi.Api.V1.Requests.Orders.CreateOrderRequestDto": {
        "type": "object",
        "properties": {
          "tariffKey": {
            "type": "string",
            "description": "Tariff key of the tariff to be used",
            "example": "RabotSmart"
          },
          "userAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.UserAccountDto"
              }
            ],
            "description": "Information about user account, that should be created and bound with the tariff. If an account for the same user (identified by the email address) already exists, the contract is linked to the existing user account instead."
          },
          "contract": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractDto"
              }
            ],
            "description": "Information about the contract, that should be created for this order"
          },
          "campaignCode": {
            "type": "string",
            "description": "Optional campaign code, if campaign is to be used",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a new order to be created"
      },
      "Rabot.Partner.WebApi.Api.V1.Requests.Tariffs.TariffCalculationRequestDto": {
        "type": "object",
        "properties": {
          "yearlyConsumptionKwh": {
            "type": "number",
            "description": "Yearly consumption in kWh.",
            "format": "double"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP code of the household, 5 digits without spaces."
          },
          "hasSmartMeter": {
            "type": "boolean",
            "description": "Whether the household energy consumption is metered by a smart meter."
          },
          "hasElectricVehicle": {
            "type": "boolean",
            "description": "Whether there is an electric vehicle (charger) in the household."
          },
          "campaignCode": {
            "type": "string",
            "description": "Campaign used by the customer, if existing",
            "nullable": true,
            "example": "rabot.home.2024"
          }
        },
        "additionalProperties": false,
        "description": "Data object for a tariff calculation request."
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.ApiCustomerLinkResponse": {
        "required": [
          "authorizationUrl"
        ],
        "type": "object",
        "properties": {
          "authorizationUrl": {
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Contract.InsertContractConsumptionPlanResponseDto": {
        "type": "object",
        "properties": {
          "withWarning": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Time periods inserted with warning."
          },
          "consumptionPlanKey": {
            "type": "string",
            "description": "Key of inserted consumption plan.",
            "format": "uuid",
            "example": "e1234567-0000-1111-2222-08913e72c049"
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.ContractMetricsPeriod": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start of period",
            "format": "date-time",
            "example": "2024-09-13 22:00:00"
          },
          "to": {
            "type": "string",
            "description": "End of period",
            "format": "date-time",
            "example": "2024-09-29 22:00:00"
          }
        },
        "additionalProperties": false,
        "description": "Metrics period"
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.ContractMetricsRecord": {
        "type": "object",
        "properties": {
          "moment": {
            "type": "string",
            "description": "Moment of time this record is related to. Depending on the requested aggregation interval, denotes the start of the interval (e.g. 1st of a month if interval is \"Monthly\")",
            "format": "date-time",
            "example": "2024-09-13 22:00:00"
          },
          "value": {
            "type": "number",
            "description": "Metric value",
            "format": "double",
            "example": 0.7001
          },
          "valueRelevanceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.ContractMetricsRecordRelevanceType"
              }
            ],
            "description": "Denotes if the value is a measured value (\"Actual\") or a predicted value (\"Forecast\"), for example in case of energy cost or consumption",
            "example": "Forecast"
          }
        },
        "additionalProperties": false,
        "description": "Single contract metric record"
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.ContractMetricsRecordRelevanceType": {
        "enum": [
          "Actual",
          "Forecast"
        ],
        "type": "string",
        "description": "Value relevance type of metric record<p>Members:</p><ul><li><i>Actual</i> - Actual</li> <li><i>Forecast</i> - Forecast</li> </ul>"
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.GetContractMetricsDto": {
        "type": "object",
        "properties": {
          "valueUnitInfo": {
            "type": "string",
            "description": "Value unit of metrics",
            "nullable": true,
            "example": "in kWh"
          },
          "consideredDataPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.ContractMetricsPeriod"
              }
            ],
            "description": "Period of generated metrics",
            "nullable": true
          },
          "metricType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsType"
              }
            ],
            "description": "Metrics type"
          },
          "valueType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsValueType"
              }
            ],
            "description": "Metric value type",
            "example": "Dynamic"
          },
          "interval": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.ContractMetricsInterval"
              }
            ],
            "description": "Metrics interval",
            "example": "Daily"
          },
          "intervalDuration": {
            "type": "number",
            "description": "Interval duration",
            "format": "double",
            "nullable": true,
            "example": 16
          },
          "averageValuePerInterval": {
            "type": "number",
            "description": "Average Value per interval",
            "format": "double",
            "nullable": true,
            "example": 0.7036
          },
          "totalValue": {
            "type": "number",
            "description": "Total value",
            "format": "double",
            "nullable": true,
            "example": 11.2583
          },
          "numberOfEntries": {
            "type": "integer",
            "description": "Number of records",
            "format": "int32",
            "example": 16
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.ContractMetrics.ContractMetricsRecord"
            },
            "description": "List of records"
          }
        },
        "additionalProperties": false,
        "description": "Get contract metrics response"
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrderByContractNumberResponseDto": {
        "type": "object",
        "properties": {
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.OrderDto"
              }
            ],
            "description": "Current contract status"
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Order.GetOrdersByPartnerIdResponseDto": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.OrderDto"
            },
            "description": "List of orders"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of orders",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Orders.CreateOrderResponseDto": {
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "string",
            "description": "Customer number of created customer",
            "example": "234567890"
          },
          "contractNumber": {
            "type": "string",
            "description": "Number of newly created contract",
            "example": "345678901"
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Orders.GetContractResponseDto": {
        "type": "object",
        "properties": {
          "contractNumber": {
            "type": "string",
            "description": "Contract number"
          },
          "name": {
            "type": "string",
            "description": "Contract name, if added by the user to differentiate multiple contracts",
            "nullable": true,
            "example": "Home"
          },
          "deliveryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.AddressDto"
              }
            ],
            "description": "Delivery address - the location where the meter is installed",
            "nullable": true
          },
          "billingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.AddressDto"
              }
            ],
            "description": "Billing address",
            "nullable": true
          },
          "bankDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.BankDetailsDto"
              }
            ],
            "description": "Bank details",
            "nullable": true
          },
          "contractState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.DataObjects.Enumerations.ContractStates"
              }
            ],
            "description": "Contract state",
            "example": "Open"
          },
          "meterNumber": {
            "type": "string",
            "description": "Meter number",
            "example": "12LN6786454"
          },
          "meLoIdentifier": {
            "type": "string",
            "description": "Meter location id",
            "nullable": true,
            "example": "DE12345678901234567890"
          },
          "maLoIdentifier": {
            "type": "string",
            "description": "Meter location id",
            "nullable": true,
            "example": "99987999749"
          },
          "tariffName": {
            "type": "string",
            "description": "Tariff name",
            "example": "Rabot.smart"
          },
          "actualDateOfDelivery": {
            "type": "string",
            "description": "Start of delivery for this contract",
            "format": "date",
            "example": "2025-03-01"
          },
          "endDateOfDelivery": {
            "type": "string",
            "description": "End date of delivery, null if contract is not cancelled",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "cancellationPeriod": {
            "type": "integer",
            "description": "Cancellation period",
            "format": "int32",
            "example": 1
          },
          "cancellationPeriodUnit": {
            "type": "string",
            "description": "Cancellation period unit",
            "example": "Month"
          },
          "durationPeriod": {
            "type": "integer",
            "description": "Minimum duration of the contract",
            "format": "int32",
            "example": 1
          },
          "durationPeriodUnit": {
            "type": "string",
            "description": "Duration period unit",
            "example": "Month"
          },
          "renewalPeriod": {
            "type": "integer",
            "description": "Renewal period - for how long the contract extends when not cancelled",
            "format": "int32",
            "example": 1
          },
          "renewalPeriodUnit": {
            "type": "string",
            "description": "Renewal period unit",
            "example": "Month"
          },
          "expectedAnnualConsumptionInKwhPerYear": {
            "type": "integer",
            "description": "Expected annual consumption in kWh per year",
            "format": "int32",
            "example": 3500
          },
          "accountingMethod": {
            "type": "string",
            "description": "Meter config type",
            "nullable": true,
            "example": "IMSy (TAF7)"
          },
          "distributionSystemOperatorCode": {
            "type": "string",
            "description": "Code of Distribution System Operator",
            "nullable": true,
            "example": "9907248000001"
          },
          "distributionSystemOperatorName": {
            "type": "string",
            "description": "Name of Distribution System Operator",
            "nullable": true,
            "example": "SWM Infrastruktur GmbH & Co. KG"
          },
          "previousSupplierCode": {
            "type": "string",
            "description": "Code of previous supplier",
            "nullable": true,
            "example": "9910660000004"
          },
          "previousSupplierName": {
            "type": "string",
            "description": "Name of previous supplier",
            "nullable": true,
            "example": "Octopus Energy Germany"
          }
        },
        "additionalProperties": false
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Tariff.ComparisonTariffDetailsDto": {
        "required": [
          "basePrice",
          "totalPrice",
          "workingPrice"
        ],
        "type": "object",
        "properties": {
          "workingPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Working price of the comparison tariff",
            "nullable": true
          },
          "basePrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Base price of the comparison tariff",
            "nullable": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Total price of the comparison tariff",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about a comparison tariff"
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Tariff.RabotShareDetailsDto": {
        "required": [
          "rabotShare",
          "rabotSharePercentage",
          "totalPriceWithoutRabotShare"
        ],
        "type": "object",
        "properties": {
          "rabotShare": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Rabot share",
            "nullable": true
          },
          "rabotSharePercentage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Rabot share as percentage value"
          },
          "totalPriceWithoutRabotShare": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Total price without RABOT share"
          }
        },
        "additionalProperties": false,
        "description": "Information about the RABOT share."
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto": {
        "required": [
          "durationPeriod",
          "name",
          "noticePeriod",
          "priceComponents"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the calculated tariff",
            "example": "rabot.smart"
          },
          "subName": {
            "type": "string",
            "description": "Subname of the calculated tariff.",
            "nullable": true,
            "example": null
          },
          "priceComponents": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffPriceComponentsDto"
              }
            ],
            "description": "Components of the price."
          },
          "durationPeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.IntegerUnitValueDto"
              }
            ],
            "description": "Duration period of the tariff."
          },
          "noticePeriod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.IntegerUnitValueDto"
              }
            ],
            "description": "Notice period of the tariff."
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Features of the tariff.",
            "nullable": true
          },
          "yearlySavingsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto+YearlySavingsDetailsDto"
              }
            ],
            "description": "Information about yearly savings, compared to the local default supplier (Grundversorger)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response containing the calculated tariff details."
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffCalculationResponseDto+YearlySavingsDetailsDto": {
        "required": [
          "co2",
          "price"
        ],
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Cost savings per year",
            "format": "double",
            "example": 180.5
          },
          "co2": {
            "type": "integer",
            "description": "Savings in CO2 emissions in kg, based on the default energy grid mix",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Information about yearly savings, compared to the local default supplier (Grundversorger)"
      },
      "Rabot.Partner.WebApi.Api.V1.Responses.Tariff.TariffPriceComponentsDto": {
        "required": [
          "basePricePerMonth",
          "baseServiceFee",
          "effectiveWorkPrice",
          "estimatedConsumption",
          "estimatedWorkPrice",
          "expectedWorkPrice",
          "pricePerMonth",
          "unitPrice",
          "variableServiceFee"
        ],
        "type": "object",
        "properties": {
          "pricePerMonth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Total average cost per month, based on the given yearly consumption. Includes VAT"
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Unit price per kWh. This includes the price of energy, all fees and taxes, and a service fee"
          },
          "basePricePerMonth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Base price of the tariff, including monthly grid fees, metering fees and a service fee"
          },
          "estimatedConsumption": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Estimated consumption per month"
          },
          "estimatedWorkPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Estimated work price"
          },
          "expectedWorkPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Expected work price per month"
          },
          "effectiveWorkPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Effective work price."
          },
          "baseServiceFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "Base service fee, per month"
          },
          "variableServiceFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.DataObjects.DecimalUnitValueDto"
              }
            ],
            "description": "service fee per kWh"
          },
          "rabotShare": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Tariff.RabotShareDetailsDto"
              }
            ],
            "description": "RABOT share details, in the tariff is based on a savings share model",
            "nullable": true
          },
          "comparisonTariff": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Rabot.Partner.WebApi.Api.V1.Responses.Tariff.ComparisonTariffDetailsDto"
              }
            ],
            "description": "Information about the price conditions of the local default supplier (Grundversorger)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price components of a tariff."
      },
      "Rabot.Prosumer.Grpc.Contracts.Services.Generated.DocumentType": {
        "enum": [
          "All",
          "PrePayment",
          "Settlement",
          "ContractConfirmation"
        ],
        "type": "string",
        "description": "<p>Members:</p><ul></ul>"
      }
    }
  },
  "tags": [
    {
      "name": "Customer",
      "description": "Controller implementing RESTful API to manage customers."
    },
    {
      "name": "DayAheadPrices",
      "description": "Provides a RESTful API to perform day-ahead-prices-related operations."
    },
    {
      "name": "Order",
      "description": "Provides a RESTful API to perform order-related operations."
    },
    {
      "name": "Tariff",
      "description": "Provides a RESTful API to perform tariff-related operations."
    }
  ]
}